var Webpack = require("webpack");
var Glob = require("glob");
var CopyWebpackPlugin = require("copy-webpack-plugin");
var ExtractTextPlugin = require("extract-text-webpack-plugin");
var ManifestPlugin = require("webpack-manifest-plugin");
var CleanWebpackPlugin = require("clean-webpack-plugin");

var configurator = {
  entries: function(){
    var entries = {
      application: [
        './node_modules/jquery-ujs/src/rails.js',
        './assets/css/application.scss',
      ],
    }
    
    Glob.sync("./assets/*/*.*").reduce((_, entry) => {
      let key = entry.replace(/(\.\/assets\/(js|css|go)\/)|\.(js|s[ac]ss|go)/g, '')
      if(key.startsWith("_") || (/(js|s[ac]ss|go)$/i).test(entry) == false) {
        return
      }
      
      if( entries[key] == null) {
        entries[key] = [entry]
        return
      } 
      
      entries[key].push(entry)
    })

    return entries
  },

  plugins(env) {
    var plugins = [
      new CleanWebpackPlugin(["public/assets"], {verbose: false,}),
      new Webpack.ProvidePlugin({$: "jquery",jQuery: "jquery"}),
      new ExtractTextPlugin("[name].[hash].css"),
      new CopyWebpackPlugin([{from: "./assets",to: ""}], {copyUnmodified: true,ignore: ["css/**", "js/**"] }),
      new Webpack.LoaderOptionsPlugin({minimize: true,debug: false}),
      new ManifestPlugin({ fileName: "manifest.json"})
    ];

    if(env != "development") {
      plugins.push(new Webpack.optimize.UglifyJsPlugin({
        beautify: false,
        mangle: {
          screw_ie8: true,
          keep_fnames: true
        },
        compress: {
          screw_ie8: true
        },
        comments: false
      }))
    }

    return plugins
  },

  moduleOptions: function(env) {
    return {
      rules: [
        {
          test: /\.s[ac]ss$/,
          use: ExtractTextPlugin.extract({
            fallback: "style-loader",
            use: [{
              loader: "css-loader",
              options: {
                sourceMap: true
              }
            },
              {
                loader: "sass-loader",
                options: {
                  sourceMap: true
                }
              }
            ]
          })
        },
        { test: /\.jsx?$/,loader: "babel-loader",exclude: /node_modules/ },
        { test: /\.(woff|woff2|ttf|svg)(\?v=\d+\.\d+\.\d+)?$/,use: "url-loader"},
        { test: /\.eot(\?v=\d+\.\d+\.\d+)?$/,use: "file-loader" },
        { test: require.resolve("jquery"),use: "expose-loader?jQuery!expose-loader?$"},
        { test: /\.go$/, use: "gopherjs-loader"}
      ]
    }
  },

  buildConfig: function(){
    var env = process.env.NODE_ENV || "development";

    return {
      mode: env,
      entry: configurator.entries(env),
      output: {filename: "[name].[hash].js", path: `${__dirname}/public/assets`},
      plugins: configurator.plugins(env),
      module: configurator.moduleOptions(env)
    }
  }
}

module.exports = configurator.buildConfig()