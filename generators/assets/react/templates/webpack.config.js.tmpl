'use strict';

const autoprefixer = require('autoprefixer');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const CleanWebpackPlugin = require('clean-webpack-plugin');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const paths = require('./config/paths');
const publicPath = ('/');
const cleanPaths = [paths.appBuild.concat("/assets/js"), paths.appBuild.concat("/assets/css")]

// Note: defined here because it will be used more than once.
const cssFilename = 'assets/css/[name].[contenthash:8].css';

if (process.env.NODE_ENV == 'development') {
	const WatchMissingNodeModulesPlugin = require('react-dev-utils/WatchMissingNodeModulesPlugin');
	const CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');
	// This is the development configuration.
	// It is focused on developer experience and fast rebuilds.
	// The production configuration is different and lives in a separate file.
	module.exports = {
	  // You may want 'eval' instead if you prefer to see the compiled output in DevTools.
    // See the discussion in https://github.com/facebookincubator/create-react-app/issues/343.
      devtool: 'cheap-module-source-map',
	  // These are the "entry points" to our application.
	  // This means they will be the "root" imports that are included in JS bundle.
	  // The first two entry points enable "hot" CSS and auto-refreshes for JS.
	  entry: [
			// We ship a few polyfills by default:
			require.resolve('./config/polyfills'),
			// Errors should be considered fatal in development
			// Uncomment below line in the next react-dev-utils release
			// require.resolve('react-dev-utils/crashOverlay'),
			// Finally, this is your app's code:
			paths.appIndexJs,
			// We include the app code last so that if there is a runtime error during
			// initialization, it doesn't blow up the WebpackDevServer client, and
			// changing JS code would still trigger a refresh.
	  ],
	  output: {
			// The build folder.
			path: paths.appBuild,
			// Add /* filename */ comments to generated require()s in the output.
			pathinfo: true,
			// Generated JS file names (with nested folders).
		  // There will be one main bundle.
			filename: 'assets/js/bundle.js',
			// This is the URL that app is served from. We use "/" in development.
			publicPath: publicPath,
	  },
	  resolve: {
		// This allows you to set a fallback for where Webpack should look for modules.
		// We read `NODE_PATH` environment variable in `paths.js` and pass paths here.
		// We placed these paths second because we want `node_modules` to "win"
		// if there are any conflicts. This matches Node resolution mechanism.
		// https://github.com/facebookincubator/create-react-app/issues/253
		modules: ['node_modules'].concat(paths.nodePaths),
		// These are the reasonable defaults supported by the Node ecosystem.
		// We also include JSX as a common component filename extension to support
		// some tools, although we do not recommend using it, see:
		// https://github.com/facebookincubator/create-react-app/issues/290
		extensions: ['.js', '.json', '.jsx'],
		alias: {
		  // Support React Native Web
		  // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/
		  'react-native': 'react-native-web',
		},
	  },
	  module: {
			rules: [
				// Disable require.ensure as it's not a standard language feature.
				{ parser: { requireEnsure: false } },
				// First, run the linter.
				// It's important to do this before Babel processes the JS.
				{
				  test: /\.(js|jsx)$/,
				  enforce: 'pre',
				  use: [
				    {
				      loader: 'eslint-loader',
				    },
				  ],
				  include: paths.appSrc,
				},
				// ** ADDING/UPDATING LOADERS **
				// The "url" loader handles all assets unless explicitly excluded.
				// The `exclude` list *must* be updated with every change to loader extensions.
				// When adding a new loader, you must add its `test`
				// as a new entry in the `exclude` list for "url" loader.

				// "file" loader makes sure those assets get served by WebpackDevServer.
				// When you `import` an asset, you get its (virtual) filename.
				// In production, they would get copied to the `build` folder.
				{
				  exclude: [
				    /\.html$/,
				    /\.(js|jsx)$/,
				    /\.css$/,
				    /\.json$/,
				    /\.bmp$/,
				    /\.gif$/,
				    /\.jpe?g$/,
				    /\.png$/,
				  ],
				  loader: 'file-loader',
				  options: {
				    name: 'assets/images/[name].[hash:8].[ext]',
				  },
				},
				// "url" loader works like "file" loader except that it embeds assets
				// smaller than specified limit in bytes as data URLs to avoid requests.
				// A missing `test` is equivalent to a match.
				{
				  test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
				  loader: 'url-loader',
				  options: {
				    limit: 10000,
				    name: 'assets/images/[name].[hash:8].[ext]',
				  },
				},
				// Process JS with Babel.
				{
				  test: /\.(js|jsx)$/,
				  include: paths.appSrc,
				  loader: 'babel-loader',
				  options: {
				    // This is a feature of `babel-loader` for webpack (not Babel itself).
				    // It enables caching results in ./node_modules/.cache/babel-loader/
				    // directory for faster rebuilds.
				    cacheDirectory: true,
				  },
				},
				// "postcss" loader applies autoprefixer to our CSS.
				// "css" loader resolves paths in CSS and adds assets as dependencies.
				// "style" loader turns CSS into JS modules that inject <style> tags.
				// In production, we use a plugin to extract that CSS to a file, but
				// in development "style" loader enables hot editing of CSS.
				{
					test: /\.css$/,
					use: [
						'style-loader',
						{
							loader: 'css-loader',
							options: {
								importLoaders: 1,
							},
						},
						{
							loader: 'postcss-loader',
							options: {
								ident: 'postcss', // https://webpack.js.org/guides/migrating/#complex-options
								plugins: () => [
									autoprefixer({
										browsers: [
											'>1%',
											'last 4 versions',
											'Firefox ESR',
											'not ie < 9', // React doesn't support IE8 anyway
										],
									}),
								],
							},
						},
					],
				},
				// ** STOP ** Are you adding a new loader?
				// Remember to add the new extension(s) to the "url" loader exclusion list.
			],
	  },
	  plugins: [
			// Generates an `index.html` file with the <script> injected.
			new HtmlWebpackPlugin({
				inject: true,
				template: paths.appHtml,
			}),
			// Watcher doesn't work well if you mistype casing in a path so we use
			// a plugin that prints an error when you attempt to do this.
			// See https://github.com/facebookincubator/create-react-app/issues/240
			new CaseSensitivePathsPlugin(),
			// If you require a missing module and then `npm install` it, you still have
			// to restart the development server for Webpack to discover it. This plugin
			// makes the discovery automatic so you don't have to restart.
			// See https://github.com/facebookincubator/create-react-app/issues/186
			new WatchMissingNodeModulesPlugin(paths.appNodeModules),
			new CleanWebpackPlugin(cleanPaths, {
			  root: paths.appPath,
			  verbose: false, 
			  dry: false
			}),
			new CopyWebpackPlugin([
				{ from: paths.appPublic, to: '' },
			], {
				ignore: [
					'index.html'
				]}
			),
		],
	  // Some libraries import Node modules but don't use them in the browser.
	  // Tell Webpack to provide empty mocks for them so importing them works.
	  node: {
			fs: 'empty',
			net: 'empty',
			tls: 'empty',
	  },
	  // Turn off performance hints during development because we don't do any
	  // splitting or minification in interest of speed. These warnings become
	  // cumbersome.
	  performance: {
			hints: false,
	  },
	};
} else {
	const ManifestPlugin = require('webpack-manifest-plugin');
	// This is the production configuration.
	// It compiles slowly and is focused on producing a fast and minimal bundle.
	// The development configuration is different and lives in a separate file.
	module.exports = {
		// Don't attempt to continue if there are any errors.
		bail: true,
		// We generate sourcemaps in production. This is slow but gives good results.
		// You can exclude the *.map files from the build during deployment.
		devtool: 'source-map',
		// In production, we only want to load the polyfills and the app code.
		entry: [require.resolve('./config/polyfills'), paths.appIndexJs],
		output: {
		  // The build folder.
		  path: paths.appBuild,
		  // Generated JS file names (with nested folders).
		  // There will be one main bundle.
		  filename: 'assets/js/[name].[hash:8].js',
		  // We inferred the "public path" (such as / or /my-project) from homepage.
		  publicPath: publicPath,
		},
		resolve: {
		  // This allows you to set a fallback for where Webpack should look for modules.
		  // We read `NODE_PATH` environment variable in `paths.js` and pass paths here.
		  // We placed these paths second because we want `node_modules` to "win"
		  // if there are any conflicts. This matches Node resolution mechanism.
		  // https://github.com/facebookincubator/create-react-app/issues/253
		  modules: ['node_modules'].concat(paths.nodePaths),
		  // These are the reasonable defaults supported by the Node ecosystem.
		  // We also include JSX as a common component filename extension to support
		  // some tools, although we do not recommend using it, see:
		  // https://github.com/facebookincubator/create-react-app/issues/290
		  extensions: ['.js', '.json', '.jsx'],
		  alias: {
		    // Support React Native Web
		    // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/
		    'react-native': 'react-native-web',
		  },
		},
		module: {
		  rules: [
		    // Disable require.ensure as it's not a standard language feature.
		    { parser: { requireEnsure: false } },
		    // First, run the linter.
		    // It's important to do this before Babel processes the JS.
		    {
		      test: /\.(js|jsx)$/,
		      enforce: 'pre',
		      use: [
		        {
		          loader: 'eslint-loader',
		        },
		      ],
		      include: paths.appSrc,
		    },
		    // ** ADDING/UPDATING LOADERS **
		    // The "url" loader handles all assets unless explicitly excluded.
		    // The `exclude` list *must* be updated with every change to loader extensions.
		    // When adding a new loader, you must add its `test`
		    // as a new entry in the `exclude` list in the "url" loader.

		    // "file" loader makes sure those assets end up in the `build` folder.
		    // When you `import` an asset, you get its filename.
		    {
		      exclude: [
		        /\.html$/,
		        /\.(js|jsx)$/,
		        /\.css$/,
		        /\.json$/,
		        /\.bmp$/,
		        /\.gif$/,
		        /\.jpe?g$/,
		        /\.png$/,
		      ],
		      loader: 'file-loader',
		      options: {
		        name: 'assets/images/[name].[hash:8].[ext]',
		      },
		    },
		    // "url" loader works just like "file" loader but it also embeds
		    // assets smaller than specified size as data URLs to avoid requests.
		    {
		      test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
		      loader: 'url-loader',
		      options: {
		        limit: 10000,
		        name: 'assets/images/[name].[hash:8].[ext]',
		      },
		    },
		    // Process JS with Babel.
		    {
		      test: /\.(js|jsx)$/,
		      include: paths.appSrc,
		      loader: 'babel-loader',
		    },
		    // The notation here is somewhat confusing.
				// "postcss" loader applies autoprefixer to our CSS.
				// "css" loader resolves paths in CSS and adds assets as dependencies.
				// "style" loader normally turns CSS into JS modules injecting <style>,
				// but unlike in development configuration, we do something different.
				// `ExtractTextPlugin` first applies the "postcss" and "css" loaders
				// (second argument), then grabs the result CSS and puts it into a
				// separate file in our build process. This way we actually ship
				// a single CSS file in production instead of JS code injecting <style>
				// tags. If you use code splitting, however, any async bundles will still
				// use the "style" loader inside the async code so CSS from them won't be
				// in the main CSS file.
				{
					test: /\.css$/,
					loader: ExtractTextPlugin.extract(
						Object.assign(
							{
								fallback: 'style-loader',
								use: [
									{
									  loader: 'css-loader',
									  options: {
									    importLoaders: 1,
											minimize: true,
									  },
									},
									{
									  loader: 'postcss-loader',
									  options: {
									    ident: 'postcss', // https://webpack.js.org/guides/migrating/#complex-options
									    plugins: () => [
									      autoprefixer({
									        browsers: [
									          '>1%',
									          'last 4 versions',
									          'Firefox ESR',
									          'not ie < 9', // React doesn't support IE8 anyway
									        ],
									      }),
									    ],
									  },
									},
								],
							}
						)
					),
					// Note: this won't work without 'new ExtractTextPlugin()' in 'plugins'.
				},
		    // ** STOP ** Are you adding a new loader?
		    // Remember to add the new extension(s) to the "url" loader exclusion list.
		  ],
		},
		plugins: [
			// Generates an `index.html` file with the <script> injected.
			new HtmlWebpackPlugin({
				inject: true,
				template: paths.appHtml,
				minify: {
					removeComments: true,
					collapseWhitespace: true,
					removeRedundantAttributes: true,
					useShortDoctype: true,
					removeEmptyAttributes: true,
					removeStyleLinkTypeAttributes: true,
					keepClosingSlash: true,
					minifyJS: true,
					minifyCSS: true,
					minifyURLs: true,
				},
			}),
		  // Minify the code.
		  new webpack.optimize.UglifyJsPlugin({
		    compress: {
		      screw_ie8: true, // React doesn't support IE8
		      warnings: false,
		    },
		    mangle: {
		      screw_ie8: true,
		    },
		    output: {
		      comments: false,
		      screw_ie8: true,
		    },
		    sourceMap: true,
		  }),
		  // Note: this won't work without ExtractTextPlugin.extract(..) in `loaders`.
		  new ExtractTextPlugin({
		    filename: cssFilename,
		  }),
			// Generate a manifest file which contains a mapping of all asset filenames
			// to their corresponding output file so that tools can pick it up without
			// having to parse `index.html`.
			new ManifestPlugin({
				fileName: 'asset-manifest.json',
			}),
			new CleanWebpackPlugin(cleanPaths, {
			  root: paths.appPath,
			  verbose: false, 
			  dry: false
			}),
			new CopyWebpackPlugin([
				{ from: paths.appPublic, to: '' },
			], {
				ignore: [
					'index.html'
				]}
			),
		],
		// Some libraries import Node modules but don't use them in the browser.
		// Tell Webpack to provide empty mocks for them so importing them works.
		node: {
		  fs: 'empty',
		  net: 'empty',
		  tls: 'empty',
		},
	};
}
