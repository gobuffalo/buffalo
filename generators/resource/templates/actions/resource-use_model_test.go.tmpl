{{ $ := . -}}
package actions_test

import (
	"testing"

	"github.com/stretchr/testify/require"
)
// This file is generated by Buffalo. It offers basic tests for the
// generated structure. If you change something inside your model or
// your resource you should change this testfile that your logic is 
// tested correctly.

// This file is not complete it just offers basic tests for the
// basic generated {{.model}} resource.
// That the tests are working correct you have to add test cases
// which are representing your model.
// All the parts which you need to edit are marked with
// as.FailNow("TODO: ...")

// ------------------------------------------------------------------


// This test checks {{.camel}}Resource.List() which lists all 
// {{.modelPlural}}
func (as *ActionSuite) Test_{{.modelPlural}}Resource_List() {
	as.FailNow("TODO: fill-in 'models{{.modelPlural}}{}' with appropriate test data.")
	{{.varPlural}} := models.{{.modelPlural}}{}
	
	// Create a entry for each list value
	for _, t := range {{.varPlural}} {
		err := as.DB.Create(&t)
		as.NoError(err)
	}
	// request the page for the list of {{.model}}
	res := as.HTML("/{{.under}}").Get()
	body := res.Body.String()
	// Check if the value of each list is inside the requested 
	// page.
	for _, t := range {{.varPlural}} {
		{{ range $p := .modelProps -}}
			as.FailNow("TODO: check if you set test data for '{{$p.Name}}'.")
			as.Contains(body, fmt.Sprintf("%s", t.{{ $p.Name }}))
		{{ end -}}
	}
}

// This test checks the new page for {{.model}}. 
func (as *ActionSuite) Test_{{.modelPlural}}Resource_New() {
	// Request the page
	res := as.HTML("/{{.under}}/new").Get()
	// Check for correct header
	as.Contains(res.Body.String(), "<h1>New {{.model}}</h1>")
}

// This test checks {{.camel}}Resource.Create(), which adds a
// {{.singular}} to the DB.
func (as *ActionSuite) Test_{{.modelPlural}}Resource_Create() {
	as.FailNow("TODO: fill-in 'models{{.model}}{}' with appropriate test data.")
    {{.varSingular}} := &models.{{.model}}{}
	t := *{{.varSingular}}
	res := as.HTML("/{{.under}}").Post({{.varSingular}})
	// Check the return code of the model
	as.Equal(302, res.Code)
	// Check the redirected URL
	as.Contains(res.Location(),"/{{.under}}")

	// Load the created values
	err := as.DB.First({{.varSingular}})
	as.NoError(err)
	// Check the loaded {{.varSingular}}
	as.NotZero({{.varSingular}}.ID)
	as.NotZero({{.varSingular}}.CreatedAt)
	as.FailNow("TODO: Check if these tests represents your test data.")
	{{ range $p := .modelProps -}}
	as.Equal(t.{{$p.Name}}, {{$.varSingular}}.{{$p.Name}})
	{{ end -}}
}

// This test checks {{.camel}}Resource.Create(), for a case
// when an error should occur. 
func (as *ActionSuite) Test_{{.modelPlural}}Resource_Create_Errors() {
	// Create an empty {{.model}}
    {{.varSingular}} := &models.{{.model}}{}
	// Try to create an entry 
	res := as.HTML("/{{.under}}").Post({{.varSingular}})
	// Check the return code 
	as.Equal(422, res.Code)

	as.FailNow("TODO: Delete or change the expected errors.")
	{{ range $p := .modelProps -}}
	as.Contains(res.Body.String(), "{{$p.Name}} can not be blank.")
	{{ end -}}

	c, err := as.DB.Count({{.varSingular}})
	as.NoError(err)
	// Check if there is nothing created
	as.Equal(0, c)
}

// This test checks {{.camel}}Resource.Show()
func (as *ActionSuite) Test_{{.modelPlural}}Resource_Show() {
	as.FailNow("TODO: fill-in 'models{{.model}}{}' with appropriate test data.")
    {{.varSingular}} := &models.{{.model}}{}
	// Create an entry 
	verrs, err := as.DB.ValidateAndCreate({{.varSingular}})
	as.NoError(err)
	as.False(verrs.HasAny())

	// Get the user over the Buffalo app
	res := as.HTML("/{{.under}}/%s", {{.varSingular}}.ID).Get()
	body := res.Body.String()
	// Check if the properties are inside the page
	{{ range $p := .modelProps -}}
	as.FailNow("TODO: check if you set test data for '{{$p.Name}}'.")
	as.Contains(body, {{$.varSingular}}.{{$p.Name}})
	{{ end -}}
}

// This test checks {{.camel}}Resource.Update()
func (as *ActionSuite) Test_{{.modelPlural}}Resource_Update() {
	as.FailNow("TODO: fill-in 'models{{.model}}{}' with appropriate test data.")
    {{.varSingular}} := &models.{{.model}}{}

	// Create the initial entry
	verrs, err := as.DB.ValidateAndCreate({{.varSingular}})
	as.NoError(err)
	as.False(verrs.HasAny())
	// Now change the value of each property to another value
	as.FailNow("TODO: change the test data to update the database entry.")
	changed{{.varSingular}} := &models.{{.model}}{
		ID: {{.varSingular}}.ID,
	}
	res := as.HTML("/{{.under}}/%s", {{.varSingular}}.ID).Put(changed{{.varSingular}})

	// Check the return code
	as.Equal(302, res.Code)

	// Get the updated values from the DB
	err = as.DB.Reload({{.varSingular}})
	as.NoError(err)
	// Check if the changed values are updated correctly
	as.FailNow("TODO: Check if these tests represents your test data.")
	{{ range $p := .modelProps -}}
	as.Equal(changed{{$.varSingular}}.{{$p.Name}}, {{$.varSingular}}.{{$p.Name}})
	{{ end -}}
}

