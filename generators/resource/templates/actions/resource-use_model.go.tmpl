package actions

import (

  "github.com/pkg/errors"
  "github.com/gobuffalo/buffalo"
  "github.com/markbates/pop"
  "{{.opts.App.ModelsPkg}}"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular ({{.opts.ModelName.Model}})
// DB Table: Plural ({{.opts.ModelName.Table}})
// Resource: Plural ({{.opts.Name.Resource}})
// Path: Plural (/{{.opts.Name.URL}})
// View Template Folder: Plural (/templates/{{.opts.FilesPath}}/)

// {{.opts.Name.Resource}}Resource is the resource for the {{.opts.ModelName.Model}} model
type {{.opts.Name.Resource}}Resource struct{
  buffalo.Resource
}

// List gets all {{.opts.ModelName.ModelPlural}}. This function is mapped to the path
// GET /{{.opts.Name.URL}}
func (v {{.opts.Name.Resource}}Resource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx := c.Value("tx").(*pop.Connection)

  {{.opts.ModelName.VarCasePlural}} := &models.{{.opts.ModelName.ModelPlural}}{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all {{.opts.ModelName.ModelPlural}} from the DB
  if err := q.All({{.opts.ModelName.VarCasePlural}}); err != nil {
    return errors.WithStack(err)
  }

  // Make {{.opts.ModelName.ModelPlural}} available inside the html template
  c.Set("{{.opts.ModelName.PluralUnder}}", {{.opts.ModelName.VarCasePlural}})

  // Add the paginator to the context so it can be used in the template.
  c.Set("pagination", q.Paginator)

  return c.Render(200, r.HTML("{{.opts.FilesPath}}/index.html"))
}

// Show gets the data for one {{.opts.ModelName.Model}}. This function is mapped to
// the path GET /{{.opts.Name.URL}}/{{"{"}}{{.opts.ModelName.UnderSingular}}_id}
func (v {{.opts.Name.Resource}}Resource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx := c.Value("tx").(*pop.Connection)

  // Allocate an empty {{.opts.ModelName.Model}}
  {{.opts.ModelName.VarCaseSingular}} := &models.{{.opts.ModelName.Model}}{}

  // To find the {{.opts.ModelName.Model}} the parameter {{.opts.ModelName.UnderSingular}}_id is used.
  if err := tx.Find({{.opts.ModelName.VarCaseSingular}}, c.Param("{{.opts.ModelName.UnderSingular}}_id")); err != nil {
    return c.Error(404, err)
  }

  // Make {{.opts.ModelName.VarCaseSingular}} available inside the html template
  c.Set("{{.opts.ModelName.UnderSingular}}", {{.opts.ModelName.VarCaseSingular}})

  return c.Render(200, r.HTML("{{.opts.FilesPath}}/show.html"))
}

// New renders the form for creating a new {{.opts.ModelName.Model}}.
// This function is mapped to the path GET /{{.opts.Name.URL}}/new
func (v {{.opts.Name.Resource}}Resource) New(c buffalo.Context) error {
  // Make {{.opts.ModelName.VarCaseSingular}} available inside the html template
  c.Set("{{.opts.ModelName.UnderSingular}}", &models.{{.opts.ModelName.Model}}{})

  return c.Render(200, r.HTML("{{.opts.FilesPath}}/new.html"))
}

// Create adds a {{.opts.ModelName.Model}} to the DB. This function is mapped to the
// path POST /{{.opts.Name.URL}}
func (v {{.opts.Name.Resource}}Resource) Create(c buffalo.Context) error {
  // Allocate an empty {{.opts.ModelName.Model}}
  {{.opts.ModelName.VarCaseSingular}} := &models.{{.opts.ModelName.Model}}{}

  // Bind {{.opts.ModelName.VarCaseSingular}} to the html form elements
  if err := c.Bind({{.opts.ModelName.VarCaseSingular}}); err != nil {
    return errors.WithStack(err)
  }

  // Get the DB connection from the context
  tx := c.Value("tx").(*pop.Connection)

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate({{.opts.ModelName.VarCaseSingular}})
  if err != nil {
    return errors.WithStack(err)
  }

  if verrs.HasAny() {
    // Make {{.opts.ModelName.VarCaseSingular}} available inside the html template
    c.Set("{{.opts.ModelName.UnderSingular}}", {{.opts.ModelName.VarCaseSingular}})

    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the new.html template that the user can
    // correct the input.
    return c.Render(422, r.HTML("{{.opts.FilesPath}}/new.html"))
  }

  // If there are no errors set a success message
  c.Flash().Add("success", "{{.opts.ModelName.Model}} was created successfully")

  // and redirect to the {{.opts.Name.URL}} index page
  return c.Redirect(302, "/{{.opts.Name.URL}}/%s",{{.opts.ModelName.VarCaseSingular}}.ID)
}

// Edit renders a edit form for a {{.opts.ModelName.Model}}. This function is
// mapped to the path GET /{{.opts.Name.URL}}/{{"{"}}{{.opts.ModelName.UnderSingular}}_id}/edit
func (v {{.opts.Name.Resource}}Resource) Edit(c buffalo.Context) error {
  // Get the DB connection from the context
  tx := c.Value("tx").(*pop.Connection)

  // Allocate an empty {{.opts.ModelName.Model}}
  {{.opts.ModelName.VarCaseSingular}} := &models.{{.opts.ModelName.Model}}{}

  if err := tx.Find({{.opts.ModelName.VarCaseSingular}}, c.Param("{{.opts.ModelName.UnderSingular}}_id")); err != nil {
    return c.Error(404, err)
  }

  // Make {{.opts.ModelName.VarCaseSingular}} available inside the html template
  c.Set("{{.opts.ModelName.UnderSingular}}", {{.opts.ModelName.VarCaseSingular}})
  return c.Render(200, r.HTML("{{.opts.FilesPath}}/edit.html"))
}

// Update changes a {{.opts.ModelName.Model}} in the DB. This function is mapped to
// the path PUT /{{.opts.Name.URL}}/{{"{"}}{{.opts.ModelName.UnderSingular}}_id}
func (v {{.opts.Name.Resource}}Resource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx := c.Value("tx").(*pop.Connection)

  // Allocate an empty {{.opts.ModelName.Model}}
  {{.opts.ModelName.VarCaseSingular}} := &models.{{.opts.ModelName.Model}}{}

  if err := tx.Find({{.opts.ModelName.VarCaseSingular}}, c.Param("{{.opts.ModelName.UnderSingular}}_id")); err != nil {
    return c.Error(404, err)
  }

  // Bind {{.opts.ModelName.Model}} to the html form elements
  if err := c.Bind({{.opts.ModelName.VarCaseSingular}}); err != nil {
    return errors.WithStack(err)
  }

  verrs, err := tx.ValidateAndUpdate({{.opts.ModelName.VarCaseSingular}})
  if err != nil {
    return errors.WithStack(err)
  }

  if verrs.HasAny() {
    // Make {{.opts.ModelName.VarCaseSingular}} available inside the html template
    c.Set("{{.opts.ModelName.UnderSingular}}", {{.opts.ModelName.VarCaseSingular}})

    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the edit.html template that the user can
    // correct the input.
    return c.Render(422, r.HTML("{{.opts.FilesPath}}/edit.html"))
  }

  // If there are no errors set a success message
  c.Flash().Add("success", "{{.opts.ModelName.Model}} was updated successfully")

  // and redirect to the {{.opts.Name.URL}} index page
  return c.Redirect(302, "/{{.opts.Name.URL}}/%s",{{.opts.ModelName.VarCaseSingular}}.ID)
}

// Destroy deletes a {{.opts.ModelName.Model}} from the DB. This function is mapped
// to the path DELETE /{{.opts.Name.URL}}/{{"{"}}{{.opts.ModelName.UnderSingular}}_id}
func (v {{.opts.Name.Resource}}Resource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx := c.Value("tx").(*pop.Connection)

  // Allocate an empty {{.opts.ModelName.Model}}
  {{.opts.ModelName.VarCaseSingular}} := &models.{{.opts.ModelName.Model}}{}

  // To find the {{.opts.ModelName.Model}} the parameter {{.opts.ModelName.UnderSingular}}_id is used.
  if err := tx.Find({{.opts.ModelName.VarCaseSingular}}, c.Param("{{.opts.ModelName.UnderSingular}}_id")); err != nil {
    return c.Error(404, err)
  }

  if err := tx.Destroy({{.opts.ModelName.VarCaseSingular}}); err != nil {
    return errors.WithStack(err)
  }

  // If there are no errors set a flash message
  c.Flash().Add("success", "{{.opts.ModelName.Model}} was destroyed successfully")

  // Redirect to the {{.opts.Name.URL}} index page
  return c.Redirect(302, "/{{.opts.Name.URL}}")
}
