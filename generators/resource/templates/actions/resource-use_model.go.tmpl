package actions

import (

	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular ({{.model}})
// DB Table: Plural ({{.modelPlural}})
// Resource: Plural ({{.modelPlural}})
// Path: Plural (/{{.under}})
// View Template Folder: Plural (/templates/{{.varPlural}}/)

// {{.modelPlural}}Resource is the resource for the {{.singular}} model
type {{.camel}}Resource struct{
	buffalo.Resource
}

// List gets all {{.modelPlural}}. This function is mapped to the the path
// GET /{{.under}}
func (v {{.camel}}Resource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	{{.varPlural}} := &models.{{.modelPlural}}{}
	// You can order your list here. Just change
	err := tx.All({{.varPlural}})
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All({{.downFirstCap}})
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which should be used for sorting.
	if err != nil {
		return err
	}
	// Make {{.plural}} available inside the html template
	c.Set("{{.varPlural}}", {{.varPlural}})
	return c.Render(200, r.HTML("{{.modelPluralUnder}}/index.html"))
}

// Show gets the data for one {{.model}}. This function is mapped to
// the path GET /{{.under}}/{{"{"}}{{.underSingular}}_id}
func (v {{.camel}}Resource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty {{.model}}
	{{.varSingular}} := &models.{{.model}}{}
	// To find the {{.model}} the parameter {{.underSingular}}_id is used.
	err := tx.Find({{.varSingular}}, c.Param("{{.underSingular}}_id"))
	if err != nil {
		return err
	}
	// Make {{.varSingular}} available inside the html template
	c.Set("{{.varSingular}}", {{.varSingular}})
	return c.Render(200, r.HTML("{{.modelPluralUnder}}/show.html"))
}

// New renders the formular for creating a new {{.singular}}.
// This function is mapped to the path GET /{{.under}}/new
func (v {{.camel}}Resource) New(c buffalo.Context) error {
	// Make {{.varSingular}} available inside the html template
	c.Set("{{.varSingular}}", &models.{{.model}}{})
	return c.Render(200, r.HTML("{{.modelPluralUnder}}/new.html"))
}

// Create adds a {{.singular}} to the DB. This function is mapped to the
// path POST /{{.under}}
func (v {{.camel}}Resource) Create(c buffalo.Context) error {
	// Allocate an empty {{.model}}
	{{.varSingular}} := &models.{{.model}}{}
	// Bind {{.varSingular}} to the html form elements
	err := c.Bind({{.varSingular}})
	if err != nil {
		return err
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate({{.varSingular}})
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make {{.varSingular}} available inside the html template
		c.Set("{{.varSingular}}", {{.varSingular}})
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("{{.modelPluralUnder}}/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "{{.model}} was created successfully")
	// and redirect to the {{.under}} index page
	return c.Redirect(302, "/{{.under}}/%s",{{.varSingular}}.ID)
}

// Edit renders a edit formular for a {{.singular}}. This function is
// mapped to the path GET /{{.under}}/{{"{"}}{{.underSingular}}_id}/edit
func (v {{.camel}}Resource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty {{.model}}
	{{.varSingular}} := &models.{{.model}}{}
	err := tx.Find({{.varSingular}}, c.Param("{{.underSingular}}_id"))
	if err != nil {
		return err
	}
	// Make {{.varSingular}} available inside the html template
	c.Set("{{.varSingular}}", {{.varSingular}})
	return c.Render(200, r.HTML("{{.modelPluralUnder}}/edit.html"))
}

// Update changes a {{.singular}} in the DB. This function is mapped to
// the path PUT /{{.under}}/{{"{"}}{{.underSingular}}_id}
func (v {{.camel}}Resource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty {{.model}}
	{{.varSingular}} := &models.{{.model}}{}
	err := tx.Find({{.varSingular}}, c.Param("{{.underSingular}}_id"))
	if err != nil {
		return err
	}
	// Bind {{.singular}} to the html form elements
	err = c.Bind({{.varSingular}})
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate({{.varSingular}})
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make {{.varSingular}} available inside the html template
		c.Set("{{.varSingular}}", {{.varSingular}})
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("{{.modelPluralUnder}}/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "{{.model}} was updated successfully")
	// and redirect to the {{.under}} index page
	return c.Redirect(302, "/{{.under}}/%s",{{.varSingular}}.ID)
}

// Destroy deletes a {{.singular}} from the DB. This function is mapped
// to the path DELETE /{{.under}}/{{"{"}}{{.underSingular}}_id}
func (v {{.camel}}Resource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty {{.model}}
	{{.varSingular}} := &models.{{.model}}{}
	// To find the {{.model}} the parameter {{.underSingular}}_id is used.
	err := tx.Find({{.varSingular}}, c.Param("{{.underSingular}}_id"))
	if err != nil {
		return err
	}
	err = tx.Destroy({{.varSingular}})
	if err != nil {
		return err
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "{{.model}} was destroyed successfully")
	// Redirect to the {{.under}} index page
	return c.Redirect(302, "/{{.under}}")
}
