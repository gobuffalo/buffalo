package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
)

// This file is generated by Buffalo. It offers a basic structure for 
// adding, editing and deleting a page. If your model is more 
// complex or you need more than the basic implementation you need to
//  edit this file.

// {{.camel}}Resource is the resource for the {{.singular}} model
type {{.camel}}Resource struct{
	buffalo.Resource
}

// List gets all {{.camel}}. This function is mapped to the the path 
// GET /{{.under}} 
func (v {{.camel}}Resource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	{{.downFirstCap}} := &models.{{.camel}}{}
	// You can order your list here. Just change 
	err := tx.All({{.downFirstCap}})
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All({{.downFirstCap}})
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which shuold be used for sorting. 
	if err != nil {
		return err
	}
	// Make {{.plural}} available inside the html template
	c.Set("{{.plural}}", {{.downFirstCap}})
	return c.Render(200, r.HTML("{{.under}}/index.html"))
}

// Show gets the data for one {{.singular}}. This function is mapped to
// the path GET /{{.under}}/{{"{"}}{{.singular}}_id}
func (v {{.camel}}Resource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty {{.model}}
	{{.singular}} := &models.{{.model}}{}
	// To find the {{.model}} the parameter {{.singular}}_id is used. 
	err := tx.Find({{.singular}}, c.Param("{{.singular}}_id"))
	if err != nil {
		return err
	}
	// Make {{.singular}} available inside the html template
	c.Set("{{.singular}}", {{.singular}})
	return c.Render(200, r.HTML("{{.under}}/show.html"))
}

// New renders the formular for creating a new {{.singular}}. 
// This function is mapped to the path GET /{{.under}}/new
func (v {{.camel}}Resource) New(c buffalo.Context) error {
	// Make {{.singular}} available inside the html template
	c.Set("{{.singular}}", &models.{{.model}}{})
	return c.Render(200, r.HTML("{{.under}}/new.html"))
}

// Create adds a {{.singular}} to the DB. This function is mapped to the 
// path POST /{{.under}}
func (v {{.camel}}Resource) Create(c buffalo.Context) error {
	// Allocate an empty {{.model}}
	{{.singular}} := &models.{{.model}}{}
	// Bind {{.singular}} to the html form elements
	err := c.Bind({{.singular}})
	if err != nil {
		return err
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate({{.singular}})
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make {{.singular}} available inside the html template
		c.Set("{{.singular}}", {{.singular}})
		// Make the errors available inside the html template
		c.Set("errors", verrs.Errors)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("{{.under}}/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "{{.model}} was created successfully")
	// and redirect to the {{.under}} index page
	return c.Redirect(301, "/{{.under}}")
}

// Edit renders a edit formular for a {{.singular}}. This function is 
// mapped to the path GET /{{.under}}/{{"{"}}{{.singular}}}/edit
func (v {{.camel}}Resource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty {{.model}}
	{{.singular}} := &models.{{.model}}{}
	err := tx.Find({{.singular}}, c.Param("{{.singular}}_id"))
	if err != nil {
		return err
	}
	// Make {{.singular}} available inside the html template
	c.Set("{{.singular}}", {{.singular}})
	return c.Render(200, r.HTML("{{.under}}/edit.html"))
}

// Update changes a {{.singular}} in the DB. This function is mapped to 
// the path PUT /{{.under}}/{{"{"}}{{.singular}}}
func (v {{.camel}}Resource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty {{.model}}
	{{.singular}} := &models.{{.model}}{}
	err := tx.Find({{.singular}}, c.Param("{{.singular}}_id"))
	if err != nil {
		return err
	}
	// Bind {{.singular}} to the html form elements
	err = c.Bind({{.singular}})
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate({{.singular}})
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make {{.singular}} available inside the html template
		c.Set("{{.singular}}", {{.singular}})
		// Make the errors available inside the html template
		c.Set("errors", verrs.Errors)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("{{.under}}/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "{{.model}} was edited successfully")
	// and redirect to the {{.under}} index page
	return c.Redirect(301, "/{{.under}}")
}

// Destroy deletes a {{.singular}} from the DB. This function is mapped
// to the path DELETE /{{.under}}/{{"{"}}{{.singular}}}
func (v {{.camel}}Resource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty {{.model}}
	{{.singular}} := &models.{{.model}}{}
	// To find the {{.model}} the parameter {{.singular}}_id is used. 
	err := tx.Find({{.singular}}, c.Param("{{.singular}}_id"))
	if err != nil {
		return err
	}
	err = tx.Destroy({{.singular}})
	if err != nil {
		return err
	}
	// Redirect to the {{.under}} index page
	return c.Redirect(301, "/{{.under}}")
}