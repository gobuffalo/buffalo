package actions

import (
  "github.com/pkg/errors"

  "github.com/gobuffalo/buffalo"
  "github.com/markbates/pop"
  "{{.modelsPath}}"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular ({{.model}})
// DB Table: Plural ({{.modelPlural}})
// Resource: Plural ({{.modelPlural}})
// Path: Plural (/{{.under}})

// {{.modelPlural}}Resource is the resource for the {{.singular}} model
type {{.camel}}Resource struct{
  buffalo.Resource
}

// List gets all {{.modelPlural}}. This function is mapped to the path
// GET /{{.under}}
func (v {{.camel}}Resource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx := c.Value("tx").(*pop.Connection)

  {{.varPlural}} := &models.{{.modelPlural}}{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all {{.modelPlural}} from the DB
  if err := q.All({{.varPlural}}); err != nil {
    return c.Error(404, err)
  }

  // Add the paginator to the headers so clients know how to paginate.
  c.Response().Header().Set("X-Pagination", q.Paginator.String())

  return c.Render(200, r.{{.renderFunction}}({{.varPlural}}))
}

// Show gets the data for one {{.model}}. This function is mapped to
// the path GET /{{.resourceURL}}/{{"{"}}{{.modelSingularUnder}}_id}
func (v {{.camel}}Resource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx := c.Value("tx").(*pop.Connection)

  // Allocate an empty {{.model}}
  {{.varSingular}} := &models.{{.model}}{}

  // To find the {{.model}} the parameter {{.modelSingularUnder}}_id is used.
  if err := tx.Find({{.varSingular}}, c.Param("{{.modelSingularUnder}}_id")); err != nil {
      return c.Error(404, err)
  }
  return c.Render(200, r.{{.renderFunction}}({{.varSingular}}))
}

// New default implementation. Returns a 404
func (v {{.camel}}Resource) New(c buffalo.Context) error {
  return c.Error(404, errors.New("not available"))
}

// Create adds a {{.singular}} to the DB. This function is mapped to the
// path POST /{{.resourceURL}}
func (v {{.camel}}Resource) Create(c buffalo.Context) error {
  // Allocate an empty {{.model}}
  {{.varSingular}} := &models.{{.model}}{}

  // Bind {{.varSingular}} to the html form elements
  if err := c.Bind({{.varSingular}}); err != nil {
    return errors.WithStack(err)
  }

  // Get the DB connection from the context
  tx := c.Value("tx").(*pop.Connection)

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate({{.varSingular}})
  if err != nil {
    return errors.WithStack(err)
  }

  if verrs.HasAny() {
    // Render errors as {{.renderFunction}}
    return c.Render(400, r.{{.renderFunction}}(verrs))
  }

  // Success!
  return c.Render(201, r.{{.renderFunction}}({{.varSingular}}))
}

// Edit default implementation. Returns a 404
func (v {{.camel}}Resource) Edit(c buffalo.Context) error {
  return c.Error(404, errors.New("not available"))
}

// Update changes a {{.singular}} in the DB. This function is mapped to
// the path PUT /{{.resourceURL}}/{{"{"}}{{.modelSingularUnder}}_id}
func (v {{.camel}}Resource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx := c.Value("tx").(*pop.Connection)

  // Allocate an empty {{.model}}
  {{.varSingular}} := &models.{{.model}}{}

  if err := tx.Find({{.varSingular}}, c.Param("{{.modelSingularUnder}}_id")); err != nil {
    return c.Error(404, err)
  }

  // Bind {{.singular}} to the html form elements
  if err := c.Bind({{.varSingular}}); err != nil {
    return errors.WithStack(err)
  }

  verrs, err := tx.ValidateAndUpdate({{.varSingular}})
  if err != nil {
    return errors.WithStack(err)
  }

  if verrs.HasAny() {
    // Render errors as {{.renderFunction}}
    return c.Render(400, r.{{.renderFunction}}(verrs))
  }

  // Success!
  return c.Render(200, r.{{.renderFunction}}({{.varSingular}}))
}

// Destroy deletes a {{.singular}} from the DB. This function is mapped
// to the path DELETE /{{.under}}/{{"{"}}{{.modelSingularUnder}}_id}
func (v {{.camel}}Resource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx := c.Value("tx").(*pop.Connection)

  // Allocate an empty {{.model}}
  {{.varSingular}} := &models.{{.model}}{}

  // To find the {{.model}} the parameter {{.modelSingularUnder}}_id is used.
  if err := tx.Find({{.varSingular}}, c.Param("{{.modelSingularUnder}}_id")); err != nil {
    return c.Error(404, err)
  }

  if err := tx.Destroy({{.varSingular}}); err != nil {
    return errors.WithStack(err)
  }

  // Success!
  return c.Render(200, r.{{.renderFunction}}({{.varSingular}}))
}
