package actions

import (
	"errors"

	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"{{.modelsPath}}"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular ({{.model}})
// DB Table: Plural ({{.modelPlural}})
// Resource: Plural ({{.modelPlural}})
// Path: Plural (/{{.under}})

// {{.modelPlural}}Resource is the resource for the {{.singular}} model
type {{.camel}}Resource struct{
	buffalo.Resource
}

// List gets all {{.modelPlural}}. This function is mapped to the the path
// GET /{{.under}}
func (v {{.camel}}Resource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	{{.varPlural}} := &models.{{.modelPlural}}{}
	// You can order your list here. Just change
	err := tx.All({{.varPlural}})
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All({{.downFirstCap}})
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which should be used for sorting.
	if err != nil {
		return err
	}
	return c.Render(200, r.{{.renderFunction}}({{.varPlural}}{{.renderOptionalArgument}}))
}

// Show gets the data for one {{.model}}. This function is mapped to
// the path GET /{{.under}}/{{"{"}}{{.underSingular}}_id}
func (v {{.camel}}Resource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty {{.model}}
	{{.varSingular}} := &models.{{.model}}{}
	// To find the {{.model}} the parameter {{.underSingular}}_id is used.
	err := tx.Find({{.varSingular}}, c.Param("{{.underSingular}}_id"))
	if err != nil {
		return err
	}
	return c.Render(200, r.{{.renderFunction}}({{.varSingular}}{{.renderOptionalArgument}}))
}

// New default implementation. Returns a 404
func (v {{.camel}}Resource) New(c buffalo.Context) error {
	return c.Error(404, errors.New("not available"))
}

// Create adds a {{.singular}} to the DB. This function is mapped to the
// path POST /{{.under}}
func (v {{.camel}}Resource) Create(c buffalo.Context) error {
	// Allocate an empty {{.model}}
	{{.varSingular}} := &models.{{.model}}{}
	// Bind {{.varSingular}} to the html form elements
	err := c.Bind({{.varSingular}})
	if err != nil {
		return err
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate({{.varSingular}})
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Render errors as {{.renderFunction}}
		return c.Render(400, r.{{.renderFunction}}(verrs{{.renderOptionalArgument}}))
	}
	// Success!
	return c.Render(201, r.{{.renderFunction}}({{.varSingular}}{{.renderOptionalArgument}}))
}

// Edit default implementation. Returns a 404
func (v {{.camel}}Resource) Edit(c buffalo.Context) error {
	return c.Error(404, errors.New("not available"))
}

// Update changes a {{.singular}} in the DB. This function is mapped to
// the path PUT /{{.under}}/{{"{"}}{{.underSingular}}_id}
func (v {{.camel}}Resource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty {{.model}}
	{{.varSingular}} := &models.{{.model}}{}
	err := tx.Find({{.varSingular}}, c.Param("{{.underSingular}}_id"))
	if err != nil {
		return err
	}
	// Bind {{.singular}} to the html form elements
	err = c.Bind({{.varSingular}})
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate({{.varSingular}})
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Render errors as {{.renderFunction}}
		return c.Render(400, r.{{.renderFunction}}(verrs{{.renderOptionalArgument}}))
	}
	// Success!
	return c.Render(200, r.{{.renderFunction}}({{.varSingular}}{{.renderOptionalArgument}}))
}

// Destroy deletes a {{.singular}} from the DB. This function is mapped
// to the path DELETE /{{.under}}/{{"{"}}{{.underSingular}}_id}
func (v {{.camel}}Resource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty {{.model}}
	{{.varSingular}} := &models.{{.model}}{}
	// To find the {{.model}} the parameter {{.underSingular}}_id is used.
	err := tx.Find({{.varSingular}}, c.Param("{{.underSingular}}_id"))
	if err != nil {
		return err
	}
	err = tx.Destroy({{.varSingular}})
	if err != nil {
		return err
	}
	// Success!
	return c.Render(200, r.{{.renderFunction}}({{.varSingular}}{{.renderOptionalArgument}}))
}
