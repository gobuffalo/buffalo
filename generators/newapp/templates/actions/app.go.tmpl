package actions

import (
  "github.com/gobuffalo/envy"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/buffalo/middleware"
  "github.com/gobuffalo/buffalo/middleware/ssl"
  "github.com/unrolled/secure"

  {{ if .withPop }}
  "{{.modelsPath}}"
  {{ end -}}

  {{ if .asWeb -}}
  "github.com/gobuffalo/buffalo/middleware/csrf"
  "github.com/gobuffalo/buffalo/middleware/i18n"
  "github.com/gobuffalo/packr"
  {{ end -}}

  {{ if .asAPI -}}
  "github.com/gobuffalo/x/sessions"
  {{ end -}}
)

// ENV is used to help switch settings based on where the
// application is being run. Default is "development".
var ENV = envy.Get("GO_ENV", "development")
var app *buffalo.App
{{ if .asWeb -}}
var T *i18n.Translator
{{ end }}

// App is where all routes and middleware for buffalo
// should be defined. This is the nerve center of your
// application.
func App() *buffalo.App {
  if app == nil {
    app = buffalo.New(buffalo.Options{
      Env: ENV,
      {{ if .asAPI -}}
      SessionStore: sessions.Null{},
      {{ end -}}
      SessionName: "_{{.name}}_session",
    })
    // Automatically redirect to SSL
    app.Use(ssl.ForceSSL(secure.Options{
      SSLRedirect:     ENV == "production",
      SSLProxyHeaders: map[string]string{"X-Forwarded-Proto": "https"},
    }))

    {{ if .asAPI -}}
    // Set the request content type to JSON
    app.Use(middleware.SetContentType("application/json"))
    {{ end }}

    if ENV == "development" {
      app.Use(middleware.ParameterLogger)
    }

    {{ if .asWeb -}}
    // Protect against CSRF attacks. https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)
    // Remove to disable this.
    app.Use(csrf.New)
    {{ end }}

    {{ if .withPop }}
    // Wraps each request in a transaction.
    //  c.Value("tx").(*pop.PopTransaction)
    // Remove to disable this.
    app.Use(middleware.PopTransaction(models.DB))
    {{ end }}

    {{ if .asWeb -}}
    // Setup and use translations:
    var err error
    if T, err = i18n.New(packr.NewBox("../locales"), "en-US"); err != nil {
      app.Stop(err)
    }
    app.Use(T.Middleware())
    {{ end }}

    app.GET("/", HomeHandler)

    {{ if .asWeb -}}
    app.ServeFiles("/assets", assetsBox)
    {{ end -}}
  }

  return app
}
