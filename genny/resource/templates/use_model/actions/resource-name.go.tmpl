package actions

import (

  "fmt"
  "net/http"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop"
  "github.com/gobuffalo/x/responder"
  "{{.opts.App.ModelsPkg}}"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular ({{.opts.Model.Proper}})
// DB Table: Plural ({{.opts.Model.Tableize}})
// Resource: Plural ({{.opts.Name.Resource}})
// Path: Plural (/{{.opts.Name.URL}})
// View Template Folder: Plural (/templates/{{.opts.Name.File.Pluralize}}/)

// {{.opts.Name.Resource}}Resource is the resource for the {{.opts.Model.Proper}} model
type {{.opts.Name.Resource}}Resource struct{
  buffalo.Resource
}

// List gets all {{.opts.Model.Group}}. This function is mapped to the path
// GET /{{.opts.Name.URL}}
func (v {{.opts.Name.Resource}}Resource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  {{.opts.Model.VarCasePlural}} := &models.{{.opts.Model.Group}}{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all {{.opts.Model.Group}} from the DB
  if err := q.All({{.opts.Model.VarCasePlural}}); err != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // Add the paginator to the context so it can be used in the template.
    c.Set("pagination", q.Paginator)

    c.Set("{{.opts.Model.VarCasePlural}}", {{.opts.Model.VarCasePlural}})
    return c.Render(http.StatusOK, r.HTML("/{{.opts.Name.File.Pluralize}}/index.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON({{.opts.Model.VarCasePlural}}))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML({{.opts.Model.VarCasePlural}}))
  }).Respond(c)
}

// Show gets the data for one {{.opts.Model.Proper}}. This function is mapped to
// the path GET /{{.opts.Name.URL}}/{{"{"}}{{.opts.Name.ParamID}}}
func (v {{.opts.Name.Resource}}Resource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty {{.opts.Model.Proper}}
  {{.opts.Model.VarCaseSingle}} := &models.{{.opts.Model.Proper}}{}

  // To find the {{.opts.Model.Proper}} the parameter {{.opts.Name.ParamID}} is used.
  if err := tx.Find({{.opts.Model.VarCaseSingle}}, c.Param("{{.opts.Name.ParamID}}")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    c.Set("{{.opts.Model.VarCaseSingle}}", {{.opts.Model.VarCaseSingle}})

    return c.Render(http.StatusOK, r.HTML("/{{.opts.Name.File.Pluralize}}/show.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON({{.opts.Model.VarCaseSingle}}))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML({{.opts.Model.VarCaseSingle}}))
  }).Respond(c)
}

{{ if .opts.App.AsWeb -}}
// New renders the form for creating a new {{.opts.Model.Proper}}.
// This function is mapped to the path GET /{{.opts.Name.URL}}/new
func (v {{.opts.Name.Resource}}Resource) New(c buffalo.Context) error {
  c.Set("{{.opts.Model.VarCaseSingle}}", &models.{{.opts.Model.Proper}}{})

  return c.Render(http.StatusOK, r.HTML("/{{.opts.Name.File.Pluralize}}/new.plush.html"))
}
{{ end -}}

// Create adds a {{.opts.Model.Proper}} to the DB. This function is mapped to the
// path POST /{{.opts.Name.URL}}
func (v {{.opts.Name.Resource}}Resource) Create(c buffalo.Context) error {
  // Allocate an empty {{.opts.Model.Proper}}
  {{.opts.Model.VarCaseSingle}} := &models.{{.opts.Model.Proper}}{}

  // Bind {{.opts.Model.VarCaseSingle}} to the html form elements
  if err := c.Bind({{.opts.Model.VarCaseSingle}}); err != nil {
    return err
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate({{.opts.Model.VarCaseSingle}})
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the new.html template that the user can
      // correct the input.
      c.Set("{{.opts.Model.VarCaseSingle}}", {{.opts.Model.VarCaseSingle}})

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/{{.opts.Name.File.Pluralize}}/new.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
    }).Respond(c)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "{{.opts.Model.VarCaseSingle}}.created.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/{{.opts.Name.URL}}/%v", {{.opts.Model.VarCaseSingle}}.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.JSON({{.opts.Model.VarCaseSingle}}))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.XML({{.opts.Model.VarCaseSingle}}))
  }).Respond(c)
}

{{ if .opts.App.AsWeb -}}
// Edit renders a edit form for a {{.opts.Model.Proper}}. This function is
// mapped to the path GET /{{.opts.Name.URL}}/{{"{"}}{{.opts.Name.ParamID}}}/edit
func (v {{.opts.Name.Resource}}Resource) Edit(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty {{.opts.Model.Proper}}
  {{.opts.Model.VarCaseSingle}} := &models.{{.opts.Model.Proper}}{}

  if err := tx.Find({{.opts.Model.VarCaseSingle}}, c.Param("{{.opts.Name.ParamID}}")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  c.Set("{{.opts.Model.VarCaseSingle}}", {{.opts.Model.VarCaseSingle}})
  return c.Render(http.StatusOK, r.HTML("/{{.opts.Name.File.Pluralize}}/edit.plush.html"))
}
{{ end -}}

// Update changes a {{.opts.Model.Proper}} in the DB. This function is mapped to
// the path PUT /{{.opts.Name.URL}}/{{"{"}}{{.opts.Name.ParamID}}}
func (v {{.opts.Name.Resource}}Resource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty {{.opts.Model.Proper}}
  {{.opts.Model.VarCaseSingle}} := &models.{{.opts.Model.Proper}}{}

  if err := tx.Find({{.opts.Model.VarCaseSingle}}, c.Param("{{.opts.Name.ParamID}}")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  // Bind {{.opts.Model.Proper}} to the html form elements
  if err := c.Bind({{.opts.Model.VarCaseSingle}}); err != nil {
    return err
  }

  verrs, err := tx.ValidateAndUpdate({{.opts.Model.VarCaseSingle}})
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the edit.html template that the user can
      // correct the input.
      c.Set("{{.opts.Model.VarCaseSingle}}", {{.opts.Model.VarCaseSingle}})

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/{{.opts.Name.File.Pluralize}}/edit.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
    }).Respond(c)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "{{.opts.Model.VarCaseSingle}}.updated.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/{{.opts.Name.URL}}/%v", {{.opts.Model.VarCaseSingle}}.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON({{.opts.Model.VarCaseSingle}}))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML({{.opts.Model.VarCaseSingle}}))
  }).Respond(c)
}

// Destroy deletes a {{.opts.Model.Proper}} from the DB. This function is mapped
// to the path DELETE /{{.opts.Name.URL}}/{{"{"}}{{.opts.Name.ParamID}}}
func (v {{.opts.Name.Resource}}Resource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty {{.opts.Model.Proper}}
  {{.opts.Model.VarCaseSingle}} := &models.{{.opts.Model.Proper}}{}

  // To find the {{.opts.Model.Proper}} the parameter {{.opts.Name.ParamID}} is used.
  if err := tx.Find({{.opts.Model.VarCaseSingle}}, c.Param("{{.opts.Name.ParamID}}")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  if err := tx.Destroy({{.opts.Model.VarCaseSingle}}); err != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a flash message
    c.Flash().Add("success", T.Translate(c, "{{.opts.Model.VarCaseSingle}}.destroyed.success"))

    // Redirect to the index page
    return c.Redirect(http.StatusSeeOther, "/{{.opts.Name.URL}}")
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON({{.opts.Model.VarCaseSingle}}))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML({{.opts.Model.VarCaseSingle}}))
  }).Respond(c)
}
